<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
	 "http://www.w3.org/TR/html4/strict.dtd">
<META charset="utf-8" />
<HTML>
	<SCRIPT>
		"use strict";
		function range(start, stop, step){
			if (typeof stop=='undefined'){
				// one param defined
				stop = start;
				start = 0;
			};
			if (typeof step=='undefined'){
				step = 1;
			};
			let result = [];
			for (let i=start; step>0 ? i<stop : i>stop; i+=step){
				result.push(i);
			};
			return result;
		};

		function flatten(a) {
			return [].concat.apply([], a);
		}

		function union(a, b) { return [...new Set([...a, ...b])]; }
	
		function popcount(x) {
			let result = 0;
			while (x > 0) {
				if (x & 1) {
					++result;
				}
				x >>= 1;
			}
			return result;
		}

		var bugs = []
		var changes = []

		// a list (per bug) of lists of bool flags where bit index is index into the changes array
		// array of array of integers
		var state = []

		// same type as states
		var failures = []

		var currentSubset = null;

		var counter = 1;

		function addBug(name) {
			bugs.push(name);
			state.push(range(1, Math.pow(2, changes.length)));
			failures.push([]);
			doPrompt();
		}

		function uiAddBug() {
			let name = prompt("Enter the bug's name.");
			if (name == null) {
				return;
			}
			addBug(name);
		}

		function uiEditBug(i) {
			let name = prompt("Enter the bug's name.", bugs[i]);
			if (name == null) {
				return;
			}
			bugs[i] = name;
			doPrompt();
		}

		function uiDeleteBug(i) {
			if (confirm("Are you sure you want to delete bug '" + bugs[i] +"'?")) {
				state.splice(i, 1);
				bugs.splice(i, 1);
				doPrompt();
			}
		}

		function addChange(name) {
			let others = range(0, Math.pow(2, changes.length));
			let newIndex = changes.push(name) - 1;
			let mask = Math.pow(2, newIndex);
			for (let i = 0; i < state.length; ++i) {
				let bugState = state[i];
				for (let j = 0; j < others.length; ++j) {
					bugState.push(others[j] | mask);
				}
			}
			doPrompt();
		}

		function uiAddChange() {
			let name = prompt("Enter the change's name.");
			if (name == null) {
				return;
			}
			addChange(name);
		}

		function uiEditChange(i) {
			let name = prompt("Enter the change's name.", changes[i]);
			if (name == null) {
				return;
			}
			changes[i] = name;
			doPrompt();
		}

		function uiDeleteChange(i) {
			if (confirm("Are you sure you want to delete change '" + changes[i] +"'?")) {
				let mask = Math.pow(2, i);
				for (let i = 0; i < state.length; ++i) {
					state[i] = state[i].filter((v) => !isSubset(mask, v));
					failures[i] = failures[i].filter((v) => !isSubset(mask, v));
				}
				changes.splice(i, 1);
				doPrompt();
			}
		}

		function reset() {
			let subsets = range(1, Math.pow(2, changes.length));
			state = [];
			failures = [];
			for (let i = 0; i < bugs.length; ++i) {
				state.push(subsets.slice())
				failures.push([]);
			}
			counter = 1;
			doPrompt();
		}

		function subsetToIndices(subset) {
				let index = 0;
				let results = []
				while (subset > 0) {
					if (subset & 1) {
						results.push(index);
					}
					subset = subset >> 1;
					++index;
				}
				return results;				
		}

		function indicesToSubset(indices) {
			let result = 0;
			for (let i = 0; i < indices.length; ++i) {
				result |= Math.pow(2, indices[i]);
			}
			return result;
		}

		function subsetListUnion(subsets) {
				let subset = 0
				for (let j = 0; j < subsets.length; ++j) {
					subset = subset | subsets[j];
				}
				return subset;
		}
		
		function getChangeIndicesFromSubsetList(subsets) {
				let subset = 0
				for (let j = 0; j < subsets.length; ++j) {
					subset = subset | subsets[j];
				}
				return subsetToIndices(subsetListUnion(subsets));
		}

		function getBugCandidateSubset(i) {
			return subsetListUnion(state[i]);
		}

		function getBugCandidateChangeIndices(i) {
			return getChangeIndicesFromSubsetList(state[i]);
		}

		function getBugFlattenedResultIndices(i) {
			return getChangeIndicesFromSubsetList(failures[i]);
		}

		function isSubset(a, b) {
			return (a & b) == a;
		}

		function getNextSubset() {
			function oddsOfFailure(subset, bugIndex) {
				return popcount(subset) / popcount(getBugCandidateSubset(bugIndex));
			}

			function getBugSubsetWeights(bugIndex) {
				let bug = state[bugIndex];
				let weights = new Array(bug.length).fill(0)
				for (let i = 0; i < bug.length; ++i) {
					let a = bug[i];
					for (let j = i + 1; j < bug.length; ++j) {
						let b = bug[j]
						if (isSubset(a, b)) { // a is a subset of b
							weights[i] += oddsOfFailure(a, bugIndex); // so if a fails we can remove b, so add the odds of a failing to a's weight
							weights[j] += 1 - oddsOfFailure(b, bugIndex); // and if b passes we can remove a, so add the odds of b passing to b's weight
						}
					}
				}
				return weights;
			}

			function getSubsetWeights() {
				let weights = {}
				for (let i = 0; i < bugs.length; ++i) {
					let bug = state[i];
					let bugWeights = getBugSubsetWeights(i);
					for (let j = 0; j < bugWeights.length; ++j) {
						let subset = bug[j];
						let weight = bugWeights[j];
						if (!(subset in weights)) {
							weights[subset] = 0;
						}
						weights[subset] += weight;
					}
				}
				return weights;
			}

			function getHeaviestSubsets() {
				let weights = getSubsetWeights();
				let heaviestWeight = 0;
				let heaviestSubsets = [];
				for (let subset in weights) {
					if (weights[subset] > heaviestWeight) {
						heaviestWeight = weights[subset];
						heaviestSubsets = [subset];
					} else if (weights[subset] == heaviestWeight) {
						heaviestSubsets.push(subset);
					}
				}
				return heaviestSubsets;
			}

			return Math.min(...getHeaviestSubsets());
		}

		function filterSubsets(passedSubset, bugSubsets) {
			let results = []
			for (let i = 0; i < bugSubsets.length; ++i) {
				if (!isSubset(bugSubsets[i], passedSubset)) {
					results.push(bugSubsets[i]);
				}
			}
			return results;
		}

		function filterSupersets(failedSubset, bugSubsets) {
			let result = []
			for (let i = 0; i < bugSubsets.length; ++i) {
				if (!isSubset(failedSubset, bugSubsets[i])) {
					result.push(bugSubsets[i]);
				}
			}
			return result;
		}

		function onFail(bugIndex) {
			failures[bugIndex] = filterSupersets(currentSubset, failures[bugIndex]);
			failures[bugIndex].push(currentSubset);
			state[bugIndex] = filterSupersets(currentSubset, state[bugIndex]);
		}

		function onPass(bugIndex) {
			state[bugIndex] = filterSubsets(currentSubset, state[bugIndex]);
		}

		function appendButton(parent, html, handler) {
			let element = document.createElement("INPUT");
			element.type = "button";
			element.value = html;
			element.onclick = handler;
			element.style.fontSize = '100%';
			parent.appendChild(element);
			return element;
		}


		function getPrompt() {
			return document.getElementById('prompt');
		}

		function isComplete() {
			for (let i = 0; i < state.length; ++i) {
				bug = state[i]
				for (let j = 0; j < bug.length; ++j) {
					return false;
				}
			}
			return true;
		}

		function doPrompt() {
			// {
			// 	let p = document.getElementById('debug');
			// 	p.innerHTML += "state = " + JSON.stringify(state) + "<br>";
			// 	p.innerHTML += "failures = " + JSON.stringify(failures) + "<br>";
			// }

			let p = getPrompt();
			if (bugs.length == 0 || changes.length == 0) {
				p.innerHTML = "Setup: use the grid above to enter bugs and changes.";
				populateGrid();
				return;
			}

			currentSubset = getNextSubset();
			function populateGrid() {
				let g = document.getElementById('grid');

				function clear() {
					while (g.rows.length > 0) {
						g.deleteRow(0);
					};
				}

				function dimension() {
					for (let r = 0; r < changes.length + 4; ++r) {
						let row = g.insertRow(r);
						for (let c = 0; c < bugs.length + 4; ++c) {
							row.insertCell(c);
						}
					}
				}

				function setBugsLabel() {
					let v = g.rows[0].cells[3];
					v.colSpan = bugs.length;
					let center = document.createElement('CENTER');
					v.appendChild(center);
					center.innerHTML = "<STRONG>Bugs</STRONG>";
					let add = appendButton(center, "+", uiAddBug);
					add.style.margin = '5px';
				}

				function setChangesLabel() {
					let v = g.rows[2].cells[0];
					v.rowSpan = changes.length + 1;
					v.innerHTML = "<P style='writing-mode: tb-rl'><STRONG>Changes</STRONG></P>";
					let add = appendButton(v, "+", uiAddChange);
					add.style.margin = '5px';
				}

				function setBugHeaders() {
					for (let i = 0; i < bugs.length; ++i) {
						let c = g.rows[1].cells[i + 3]
						c.style.padding = '.2em';
						c.innerHTML = bugs[i];
						if (getUnreducibleFailuresForBug(i).length > 1) {
							c.innerHTML += "*";
						}
					}
				}

				function setChangeHeaders() {
					for (let i = 0; i < changes.length; ++i) {
						let c = g.rows[i + 3].cells[1];
						c.style.padding = '.2em';
						c.innerHTML = changes[i];
					}
				}

				function getBugChangeState(bugIndex, changeIndex) {
					let f = failures[bugIndex];
					let bug = state[bugIndex];
					let mask = Math.pow(2, changeIndex);
					let anySureFailure = false;
					let isDone = !isSubset(Math.pow(2, changeIndex), getBugCandidateSubset(bugIndex));
					let failureNotReducibleToCount = 0;
					for (let i = 0; i < f.length; ++i) {
						if (isSubset(mask, f[i])) { // change is in failure i
							let failureCanBeReduced = false;
							let failureCanBeReducedToRemoveChange = false;
							for (let j = 0; j < bug.length; ++j) {
								if (isSubset(bug[j], f[i])) { // state j is a subset of failure i
									failureCanBeReduced = true;
									if (!isSubset(mask, bug[j])) { // change is not in state j
										failureCanBeReducedToRemoveChange = true; // failure i can be reduced to a failure without changeIndex
										isDone = false;
										break;
									}
								}
							}
							if (!failureCanBeReducedToRemoveChange) {
								anySureFailure = true;
							}
							if (!failureCanBeReduced) {
								++failureNotReducibleToCount;
							}	
						}
					}
					let result = isDone ?
						(anySureFailure ? "❌" : "✔️") :
						(anySureFailure ? "❓" /* red question mark */: "❔");
					if (failureNotReducibleToCount > 1) {
						result = result + "*";
					}
					return result;
				}

				function setBugState(i) {
					for (let j = 0; j < changes.length; ++j) {
						let c = g.rows[j + 3].cells[i + 2]
						c.innerHTML = getBugChangeState(i, j);
					}
				}

				function setBugStates() {
					for (let i = 0; i < bugs.length; ++i) {
						setBugState(i);
					}
				}

				function addBugModifiers(i) {
					let c = g.rows[changes.length + 3].cells[i + 3];
					let edit = appendButton(c, "✎", function() { uiEditBug(i); });
					edit.style.width = '100%';
					c.appendChild(document.createElement('BR'))
					let del = appendButton(c, "🗑", function() { uiDeleteBug(i); });
					del.style.width = '100%'
				}

				function addChangeModifiers(i) {
					let c = g.rows[i + 3].cells[bugs.length + 2];
					// c.style.height = '100%';
					let h = '40px'
					let w = '50px'
					let edit = appendButton(c, "✎", function() { uiEditChange(i); });
					edit.style.height = h;
					edit.style.width = w;
					// let up = appendButton(c, "↑", function() { moveChangeDown(i); });
					// up.style.height = h;
					// up.style.width = w;
					// let down = appendButton(c, "↓", function() { moveChangeUp(i); });
					// down.style.height = h;
					// down.style.width = w;
					let del = appendButton(c, "🗑", function() { uiDeleteChange(i); });
					del.style.height = h;
					del.style.width = w;
				}

				function addModifierButtons() {
					for (let i = 0; i < bugs.length; ++i) {
						addBugModifiers(i);
					}
					for (let i = 0; i < changes.length; ++i) {
						addChangeModifiers(i);
					}
				}

				function setBorders() {
					let bugsCellStyle = g.rows[0].cells[3].style;
					bugsCellStyle.borderLeft = '1px solid black';
					bugsCellStyle.borderRight = '1px solid black';
					bugsCellStyle.padding = '.2em';

					let changesCellStyle = g.rows[2].cells[0].style;
					changesCellStyle.borderTop = '1px solid black';
					changesCellStyle.borderBottom = '1px solid black';

					for (let i = 0; i < bugs.length; ++i) {
						g.rows[1].cells[i + 3].style.border = '1px solid black';
						g.rows[1].cells[i + 3].style.borderBottom = '0px solid black';
						g.rows[changes.length + 3].cells[i + 3].style.borderLeft = '1px solid black';
						g.rows[changes.length + 3].cells[i + 3].style.borderRight = '1px solid black';
					}
					for (let i = 0; i < changes.length; ++i) {
						g.rows[i + 3].cells[bugs.length + 2].style.borderTop = '1px solid black';
						g.rows[i + 3].cells[bugs.length + 2].style.borderBottom = '1px solid black';
						for (let j = -1; j < bugs.length; ++j) {
							g.rows[i + 3].cells[j + 2].style.border = '1px solid black';
						}
					}
				}

				function setBugColors() {
						for (let i = 0; i < bugs.length; ++i) {
							let c = g.rows[1].cells[i + 3]
							c.style.backgroundColor = (currentSubset != null && state[i].includes(currentSubset)) ? 'aquamarine' : '';
						}
				}

				function setChangeColors() {
					let indices = (currentSubset != null) ? subsetToIndices(currentSubset) : null;
					for (let i = 0; i < changes.length; ++i) {
						let c = g.rows[i + 3].cells[1];
						c.style.backgroundColor = (indices != null && indices.includes(i)) ? 'aquamarine' : '';
					}
				}

				clear();
				dimension();
				setBugsLabel();
				setChangesLabel();
				setBugHeaders();
				setChangeHeaders();
				setBugStates();
				setBorders();
				addModifierButtons();
				setBugColors();
				setChangeColors();
			}
			populateGrid();

			function canFailureBeReducedForBug(bugIndex, failure) {
				let bug = state[bugIndex];
				let anySureFailure = false;
				for (let i = 0; i < bug.length; ++i) {
					if (isSubset(bug[i], failure)) { // state i is a subset of failure
						return true;
					}
				}
				return false;
			}

			function getUnreducibleFailuresForBug(bugIndex) {
				let f = failures[bugIndex];
				let results = [];
				for (let i = 0; i < f.length; ++i) {
					if (!canFailureBeReducedForBug(bugIndex, f[i])) {
						results.push(f[i]);
					}
				}
				return results;
			}

			function setNotes() {
				let p2 = document.createElement("P");
				p.appendChild(p2);
				for (let i = 0; i < bugs.length; ++i) {
					let unreducibleFailures = getUnreducibleFailuresForBug(i);
					if (unreducibleFailures.length > 1) {
						p2.innerHTML += "NOTES:<br>Bug '" + bugs[i] + "' has multiple causes:<br>";
						for (let j = 0; j < unreducibleFailures.length; ++j) {
							p2.innerHTML += "&nbsp;&nbsp;&nbsp;&nbsp;";
							let comboIndices = subsetToIndices(unreducibleFailures[j]);
							for (let k = 0; k < comboIndices.length; ++k) {
								if (k > 0) {
									p2.innerHTML += ", ";
								}
								p2.innerHTML += "'" + changes[comboIndices[k]] + "'";
							}
							if (comboIndices.length > 1) {
								p2.innerHTML += ", when combined, cause '" + bugs[i] + "'";
							} else {
								p2.innerHTML += ", all by itself, causes '" + bugs[i] + "'";
							}
							p2.innerHTML += "<br>";
						}
					}
				}				
			}

			let indices = subsetToIndices(currentSubset);
			if (indices.length == 0) {
				p.innerHTML = "Done!<br>";
				setNotes();
				return;
			}

			p.innerHTML = "Step " + counter + ": with only changes ";
			for (let i = 0; i < indices.length; ++i) {
				if (i > 0) {
					if (i == indices.length - 1) {
						p.innerHTML += " and ";
					} else {
						p.innerHTML += ", ";
					}
				}
				p.innerHTML += "&quot;" + changes[indices[i]] + "&quot;";
			}
			p.innerHTML += " enabled, which bugs were reproducible? Double check your entries before submitting, as errors cannot be corrected.<br>";
			for (let i = 0; i < bugs.length; ++i) {
				if (state[i].includes(currentSubset)) {
					let checkbox = p.appendChild(document.createElement('INPUT'));
					checkbox.type = 'checkbox';
					checkbox.id = 'bug' + i;
					p.innerHTML += bugs[i] + "<br>";
				}
			}
			appendButton(p, "Submit", function() {
				++counter;
				for (let i = 0; i < bugs.length; ++i) {
					let checkbox = document.getElementById('bug' + i);
					if (checkbox) {
						if (checkbox.checked) {
							onFail(i);
						} else {
							onPass(i);
						}
					}
				}
				doPrompt();
			});
			setNotes();
		}

		function runTest(changeCount, expected /* list (per bug), of integer list */) {
			function reset() {
				var bugs = []
				var changes = []
				var state = []
				var failures = []
				var currentSubset = null;
			}

			reset();

			for (let i = 0; i < changeCount; ++i) {
				addChange('c' + i);
			}

			bugCount = expected.length;
			for (let i = 0; i < bugCount; ++i) {
				addBug('b' + i);
			}

			for (let i = 0; i < Math.pow(2, bugCount) && !isComplete(); ++i) { // don't let it run forever
				currentSubset = getNextSubset();
				for (let bugIndex = 0; bugIndex < bugs.length; ++bugIndex) {
					if (state[bugIndex].includes(currentSubset)) {
						e = expected[bugIndex];
						for (let subsetIndex = 0; subsetIndex < e.length; ++subsetIndex) {
							s = e[subsetIndex];
							if (isSubset(s, currentSubset)) {
								onFail(bugIndex);
							} else {
								onPass(bugIndex);
							}
						}
					}
				}
			}
		}

		document.addEventListener('DOMContentLoaded', doPrompt, false);

	</SCRIPT>
	<HEAD>
		<TITLE>Guided Differential Tester</TITLE>
	</HEAD>
	<STYLE>
		table {
			border-collapse: collapse;
		}
		table, th, td {
			/*border: 1px solid black;*/
			padding: 0;
		}
		#key td {
			border: 1px solid black;
			padding: .5em;
		}
	</STYLE>
	<BODY>
		<H1>Guided Differential Tester</H1>
		<H2>Short explanation</H2>
		<P>This tool is used to track down the causes of bugs. Enter the bugs and suspect changes below, and follow the prompts at the bottom. If none of that makes sense, scroll to the bottom for the long explanation.</P>
		<TABLE id="grid" style="display: inline-table; font-size: 150%; text-align: center; margin: 1em;">
			<TR>
				<TD>JavaScript must be enabled.</TD>
			</TR>
		</TABLE>
		<TABLE id="key" style="display: inline-table">
			<TR>
				<TD colspan=2 style="border: none"><SPAN style="font-size: 150%;">Key</SPAN></TD>
			</TR>
			<TR>
				<TD>❔</TD><TD>Collecting information</TD>
			</TR>
			<TR>
				<TD>❓</TD><TD>Bad, still collecting</TD>
			</TR>
			<TR>
				<TD>❓*</TD><TD>Multiple bad (see notes), still collecting</TD>
			</TR>
			<TR>
				<TD>✔️</TD><TD>Good</TD>
			</TR>
			<TR>
				<TD>❌</TD><TD>Bad</TD>
			</TR>
			<TR>
				<TD>❌*</TD><TD>Multiple bad (see notes)</TD>
			</TR>
			<TR>
				<TD>[bug name]*</TD><TD>Multiple causes (see notes)</TD>
			<TR>
		</TABLE>
		<H2>Status:</H2>
		<P id="prompt" style="font-size: 150%; color: green"/>
		<P />
		<INPUT type="button" value="Reset test states" style="font-size: 100%" onclick="reset()" />&nbsp;This will not erase bugs and changes.
		<P id="debug" />
		<HR>
		<H2>Long explanation</H2>
		<P>You have some system (e.g. software) that used to work correctly. Multiple changes have recently been made to it. (Examples of changes are adding mods to a game, adding some commits to a git repository, or substituting parts in a car.) However, since the changes were made, multiple issues have appeared (a.k.a. bugs). Undoing and redoing the changes one at a time might give you the information you need, or it might not. It can get complicated. If two changes are working together to create a problem, it will be hard to keep track off what combinations you've tried. The reality is that the combinations of factors leading to an issue can be arbitrary. In the worst case, a problem can be caused by multiple combinations independently! What to do? That's where this tool comes in. After you enter the bugs into the columns, and changes into the rows of the grid below, this tool will tell you which changes to undo and redo to collect that information in the fewest steps possible. When it's done, you'll get an overview in the grid, and if multiple independent combinations are the cause, you'll get a note on that as well. That's helpful, because while the grid may tell you that multiple changes are a problem, the notes will reveal that you can keep some of those problematic changes and still fix the problem! It should be noted, that while this tool performs this task in the optimal way, it can still take a lot of steps. The more changes you enter into the grid rows, the more effort it will take. Don't enter a change into the grid if you're absolutely sure that it's not a problem. This tool gets the most efficiency when the grid is wide, and short. One final cautionary note: be diligent. Just one mistake in entering data can spoil the entire result!</P>
	</BODY>
</HTML>